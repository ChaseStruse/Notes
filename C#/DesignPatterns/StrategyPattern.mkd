# Strategy Design Pattern Notes

## Parts of the pattern

**Context:** Has a reference to the strategy and invokes it <br />
**Strategy:** Implementation of the strategy <br />
**Interface for the strategy** <br />

Whenever you are injecting an interface that allows you to change some <br />
computation, you are using the Strategy Pattern
-------------------------------------------------------------------------
## Form of Payment Example

**Strategy**
- USDBuyingStrategy()
- BitcoinBuyingStrategy()

**IStrategy**
- GetPaymentProcessFor(Payment formOfPayment)

**Context**
- Invokes IStrategy.GetPaymentProcessFor(formOfPayment)

**Flow of Data:**
Context -> IStrategy --> Strategy Needed (USD or Bitcoin)
-------------------------------------------------------------------------
## Receipt Delivery Example

**Strategy**
- SendByEmail()
- Print()
- NoReceipt()

**IStrategy**
- CutomerReceipt(DeliveryMethod deliveryMethod)

**Context**
- Invokes IStrategy.CustomerReceipt(deliveryMethod)
-------------------------------------------------------------------------

## Benefits
- Makes it easy to modify a strategy without ruining other strategies
- Allows for easier testing
- Cleaner approach and single responsibility

-------------------------------------------------------------------------

## Dotnet Example
- .Sort() can take in a interface, IComparer, that allows you to pass in a strategy
