# Command Design Pattern

## Structure

- Invoker (Runs and keeps track of the commands that are being invoked)
- Command (Used as the structure, holds the commands necessary to be invoked)
    - Contains all the data to process a request for either now or later
- Receiver (Command will use the receiver and run it)

### Structure Flow

Client --Schedule a run of the command-->  Invoker (Sets a rule to invoke at the given time) --Execute at specified time --
--> Command --Uses--> Receiver

## What is it?

Command Pattern allows for better, more readable code that abstracts the layers and allows the developer to create a concrete flow of data. It will add more layers but ultimately it will help with readability and better structure.

## Benefits

- Allows for easy undo/redo functionality
    - EX: App crashes, when reopened you can redo those commands
- Makes it easier to implement more functionality without creating breaking changes

## Trade Offs

- Adds to complexity due to adding another layer to the application
    - This could be remedied with good documentation

## Typical Naming Conventions

- Invoker, tends to be called SomethingManager
    - Will have an invoke() method
- Command, tends to be called SomethingCommand
    - Will have CanExecute(), Execute(), and Undo()

## Code Example

[Repo Link](https://github.com/ChaseStruse/DesignPatternExampleProjects/tree/master/CommandDesignPattern_ShoppingCart/ShoppingCart)

## Example

**Commands:**
- OrderCommand 
    - Execute(order)
- InsertOrderCommand : IOrderCommand
    - Execute(order)
- ModifyOrderCommand : IOrderCommand
    - Execute(order)
- RemoveOrderCommand : IOrderCommand
    - Execute(order)

**Receiver:**
- Restaurant
    - ExecuteCommand(IOrderCommand commandToBeExecuted, Order order)

**Invoker:**
- WaiterInvoker
    - SetOrderCommand()
        - Takes user input to determine the command (Order, Modify, or Remove)
    - ExecuteCommand()
        - Restaurant.ExecuteCommand(orderCommand)

**Program File:** <br/>

**Scenario 1, you want to insert order** <br/>
WaiterInvoker invoker = new WaiterInvoker(); <br/>
Order order = new Order("Steak"); <br/>
invoker.SetOrderCommand("OrderCommand"); <br/>
invoker.ExecuteCommand(Order orderToBeCreated) --> calls into Restaurant.ExecuteCommand() --> calls InsertOrderCommand.Execute(order) <br/>
**Result: Order was inserted** <br/> <br/>

**Scenario 2, you would like to modify the order created above** <br/>
invoker.SetOrderCommand("ModifyCommand") <br/>
Order moddedOrder = new Order("Chicken") <br/>
invoker.ExecuteCommand(moddedOrder) <br/>
**Result: Order will now be for chicken not steak**<br/>
