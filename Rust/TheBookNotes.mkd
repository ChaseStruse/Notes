# The Book

[The Book](https://doc.rust-lang.org/book/)

## Getting Started

Anatomy of a Rust Program <br />
<br />
fn main() {
            
}           
<br />

main functions are important due to them being the first function that gets run in a rust program. <br />
Rust requires {} and functions are defined with fn <br />
`println!("Hello, world!");` // This is how you print to the console in rust <br />

Things to note:
- Rust indents with four spaces not tabs
- `println!` calls a macro called `println` this is indicated by the `!` more about this later
- Most lines of rust code end with a semicolon
<br />
Compile rust with `rustc` command <br />
ex: `rustc main.rs` <br />
run the shell script created  <br />
ex: `./main`  <br />
<br />
Hello Cargo <br />
- Cargo is rusts build system and package manager                       <br />
- Used to manage rust projects because cargo handles most tasks for you <br />
- Ex: Cargo handles building your code                                  <br />
- Ex: Cargo handles downloading libraries code is dependent on          <br />
- Ex: Cargo builds those libraries as well                              <br />
<br />

## Common Programming Concepts

[Chapter Found Here](https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html) <br /> 

Variables and Mutability in Rust are different than most languages. By defualt a variable in rust is immutable (can't be changed). <br />
To declare a standard variable in rust you do the following: `let x: u32 = 1;   // u32 is optional you dont have to specify type` <br />
To declare a mutable variable you do the following: `let mut x: u32 = 1;` <br />
To declare a constant variable you do the following: `const HOURS_IN_THE_DAY: u32 = 24;` <br />
<br />

Shadowing <br />
Rust allows you to shadow a variable which means you can declare a variable with the same name. Confusing? Heres a code example: <br />
```
let x = 5;
let x = x + 5;
```


